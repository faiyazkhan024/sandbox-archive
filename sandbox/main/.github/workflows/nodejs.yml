# This is a sample workflow for NodeJS app that will do a clean install, test and build for every push request to all branches.

# For more information on using git action workflow for NodeJS see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js Build and Deploy

# Trigger on manual event to prevent automatic execution
on:
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  check-nodejs-project:
    runs-on: ubuntu-latest
    if: false # Prevents the job from running

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Check if package.json exists (indicating a Node.js project)
      - name: Check if Node.js project
        id: check_nodejs
        run: |
          if [ -f "package.json" ]; then
            echo "Node.js project detected."
            echo "is_nodejs=true" >> $GITHUB_ENV
          else
            echo "Not a Node.js project."
            echo "is_nodejs=false" >> $GITHUB_ENV
          fi

  nodejs-build:
    needs: check-nodejs-project
    runs-on: ubuntu-latest
    if: false # Prevents the job from running

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16" # Change to the required Node.js version

      # Install dependencies
      - name: Install dependencies
        run: npm run install

      # Run tests
      - name: Run tests
        run: npm run test

      # Build the project (adjust the build command to your project)
      - name: Build the project
        run: npm run build

      # Set the current branch name as a variable
      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      # Check if the build branch exists, and create if it doesn't
      - name: Create or checkout build branch
        run: |
          git fetch origin
          if git ls-remote --heads origin build; then
            git checkout build
          else
            git checkout --orphan build
            git rm -rf .  # Remove files in the orphan branch
          fi

      # Sync the build folder with the branch-specific build directory
      - name: Sync build to build branch
        run: |
          mkdir -p "$BRANCH_NAME"
          cp -r ./build/* "$BRANCH_NAME"
          git add "$BRANCH_NAME"
          git commit -m "Build for $BRANCH_NAME branch"
          git push origin build
